# This is script for RNA-seq Analysis

# Load Libraries for RNA-seq Data Analysis
library(DESeq2)
library(dplyr)
library(tidyverse)
library(GEOquery)

# Set your working Directory
setwd("/Users/veerlestaps/Documents/Uni/Biomedische wetenschappen/Year 3/")

#=======================================#
# Step 1. Import Data & metadata into R #
#=======================================#

# Load your Data
Data <- read.delim("FPKM_cufflinks.tsv", header=TRUE, row.names=1, sep="\t", check.names = FALSE)

# get metadata 
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
metadata <- pData(phenoData(gse[[1]]))
head(metadata)  # Have a glimpse of how metadata looks like

# Increase buffer size by setting `Sys.setenv("VROOM_CONNECTION_SIZE")`
#Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 1000)

# Rename columns in metadata
colnames(metadata)
#write.table(metadata, file ="metadata.tsv", sep = "\t", row.names = FALSE, quote = FALSE)

metadata <- metadata %>%
  rename(
    Sample = `tumor (t) or normal (n):ch1`,
    Source = source_name_ch1,
    Tumor_stage = `stage tnm:ch1`,
    Age = `age:ch1`,
    Sex = `gender:ch1`,
    Life_Status = `dead:ch1`,
    Smoking_Status = `smoking:ch1`
  )

# Check updated column names
print(colnames(metadata))

# Select only the renamed columns and overwrite metadata
metadata <- metadata %>%
  select(Sample, Source, Tumor_stage, Age, Sex, Life_Status, Smoking_Status) 

rownames(metadata) <- metadata$Sample

# Check if the changes were applied
head(metadata)
#write.table(metadata, file ="metadata.tsv", sep = "\t", row.names = FALSE, quote = FALSE)

# Remove the last row from Data
head(Data)
dim(Data)
Data <- Data[-nrow(Data), ]

# Check if the last row is removed
dim(Data)  # Check new dimensions

# Define the genes of interest
genes_of_interest <- c("ENSG00000146648", "ENSG00000118046", "ENSG00000157764")

# ENSG00000146648 = EGFR
# ENSG00000118046 = STK11
# ENSG00000157764 = BRAF

# Convert Data to a long format (genes in rows, samples in columns)
expression_long <- Data %>%
  as.data.frame() %>%
  rownames_to_column("Gene") %>%
  filter(Gene %in% genes_of_interest) %>%
  pivot_longer(cols = -Gene, names_to = "Sample", values_to = "Expression")

# Merge expression data with metadata to include sample information
expression_long <- expression_long %>%
  left_join(metadata, by = "Sample")

# View the structure of the transformed data
print(head(expression_long))

# Replace NA values in the Sample column with "Control"
expression_long$Sample[is.na(expression_long$Sample)] <- "Control"

# Compute IQR for each gene and filter out outliers
expression_filtered <- expression_long %>%
  group_by(Gene) %>%  # Ensure outliers are removed per gene
  mutate(Q1 = quantile(Expression, 0.25),
         Q3 = quantile(Expression, 0.75),
         IQR = Q3 - Q1) %>%
  filter(Expression >= (Q1 - 1.5 * IQR) & Expression <= (Q3 + 1.5 * IQR)) %>%
  select(-Q1, -Q3, -IQR)  # Remove extra columns

# Plot expression levels of selected genes
ggplot(expression_long, aes(x = Sample, y = Expression, fill = Gene)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
  theme_minimal() +
  labs(title = "Gene Expression Levels Across Samples",
       x = "Sample",
       y = "Expression Level") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate sample labels

# Histogram expression levels of selected genes
ggplot(expression_filtered, aes(x = Source, y = Expression, fill = Gene)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
  theme_minimal() +
  labs(title = "Gene Expression Levels Across Samples (Outliers Removed)",
       x = "Source (NSCLC vs Control)",
       y = "Expression Level") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate sample labels

# Replace NA values in the Sample column with "Control"
expression_long$Sex[is.na(expression_long$Sex)] <- "Control"

# Boxplot of gene expression by sex
ggplot(expression_long, aes(x = Sex, y = Expression, fill = Sex)) +
  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
  geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
  facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
  theme_minimal() +
  labs(title = "Gene Expression Levels by Sex",
       x = "Sex",
       y = "Expression Level") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability

# Alternatively, you can use a violin plot
ggplot(expression_long, aes(x = Sex, y = Expression, fill = Sex)) +
  geom_violin(alpha = 0.6) +  # Shows density of expression levels
  geom_jitter(width = 0.2, alpha = 0.7) +  # Adds individual sample points
  facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
  theme_minimal() +
  labs(title = "Gene Expression Levels by Sex",
       x = "Sex",
       y = "Expression Level") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

#=======================================#
# Differential Gene Expression Analysis #
#=======================================#
# Deseq2
# Load Raw counts file
Counts <- read.delim("Raw_Counts_GSE81089.tsv", header=TRUE, row.names=1, sep="\t", check.names = FALSE)

# making sure the row names in metadata matches to column names in Counts
all(colnames(Counts) %in% rownames(metadata))

# Check if they are in the same order
all(colnames(Counts) == rownames(metadata))

# Reorder metadata rows to match the column order in Counts
metadata <- metadata[match(colnames(Counts), rownames(metadata)), , drop = FALSE]

# Check if they now match
all(colnames(Counts) == rownames(metadata))

# Check the values in the Counts file
summary(Counts)

# Convert all data values to Absolute values. (Non-negative)
Data <- abs(Counts)

# Round values to integers
Data <- round(Counts)

# Construct a DESeqDataSet object 
dds <- DESeqDataSetFromMatrix(countData = Counts,
                              colData = metadata,
                              design = ~ Source)

dds

# Quality control
# Remove genes with low counts
keep <- rowMeans(counts(dds)) >=10 # Choose one either rowmeans or rowsum
dds <- dds[keep,]

# set the factor level
dds$Source <- relevel(dds$Source, ref = "Human non-malignant tissue")

# Run DESeq 
dds <- DESeq(dds)
res <- results(dds)

res

# Explore results
summary(res)
res0.01 <- results(dds, alpha =0.01) #Question sig 0.01 or 0.05
summary(res0.01)

# MA plot
plotMA(res, main = "Differential Gene Expression Analysis: MA Plot (Malignant vs. Non-Malignant Tissue)")

# ENSG00000146648 = EGFR
# ENSG00000118046 = STK11
# ENSG00000157764 = BRAF

# Boxplot for a specific gene (e.g., "GENE_OF_INTEREST")
gene_of_interest <- "ENSG00000157764"  # Replace with gene of interest
gene_counts <- plotCounts(dds, gene = gene_of_interest, intgroup = "Source", returnData = TRUE)

# Remove outliers using IQR method
Q1 <- quantile(gene_counts$count, 0.25)
Q3 <- quantile(gene_counts$count, 0.75)
IQR <- Q3 - Q1

# Filter out outliers
gene_counts_filtered <- gene_counts %>%
  filter(count >= (Q1 - 1.5 * IQR) & count <= (Q3 + 1.5 * IQR))

# Plot without outliers
ggplot(gene_counts_filtered, aes(x = Source, y = count, fill = Source)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = paste("Expression of BRAF across source groups (outliers removed)"),
       x = "Source",
       y = "Normalized Count")

# Descriptive statistics
gene_stats <- gene_counts_filtered %>%
  group_by(Source) %>%  # Group by the "Source" variable (e.g., tumor vs normal tissue)
  summarise(
    Min = min(count),          # Minimum count
    Q1 = quantile(count, 0.25),  # 1st Quartile (25th percentile)
    Median = median(count),    # Median (50th percentile)
    Mean = mean(count),        # Mean
    Q3 = quantile(count, 0.75),  # 3rd Quartile (75th percentile)
    Max = max(count),          # Maximum count
    SD = sd(count)             # Standard deviation
  )
print(gene_stats)

#=======================================#
# Individual analysis Sex #
#=======================================#
# ENSG00000146648 = EGFR
# ENSG00000012048 = BRCA1
# ENSG00000019186 = CYP24A1

# Redefine genes of interest
genes_of_interest <- c("ENSG00000012048", "ENSG00000146648", "ENSG00000019186") 

# Ensure that Sex is a categorical variable in metadata
table(metadata$Sex)  # Check the levels of Sex

# Replace NA values with "Control"
metadata$Sex[is.na(metadata$Sex)] <- "Control"
metadata$Sex <- as.factor(metadata$Sex)  # Ensure it's a factor

# Construct a DESeqDataSet object with variable Sex
dds_sex <- DESeqDataSetFromMatrix(countData = Counts,
                                  colData = metadata,
                                  design = ~ Sex)  # Change the design to Sex
dds_sex

# Quality control
# Remove genes with low counts
keep <- rowMeans(counts(dds_sex)) >= 10
dds_sex <- dds_sex[keep,]

levels(dds_sex$Sex) #Checking to see if I should use Female or female in the next code.

# Setting "female" as the baseline to compare females vs. males
dds_sex$Sex <- relevel(dds_sex$Sex, ref = "female")  # Adjust reference if needed

# Run DESeq 
dds_sex <- DESeq(dds_sex)
res_sex <- results(dds_sex)

res_sex

# Explore results
summary(res_sex)
res_sex_0.05 <- results(dds_sex, alpha = 0.05) #Again how do we determine which sig (0.05 or 0.01)?
summary(res_sex_0.05)

# Extract and Sort Significant Genes
res_sex_sorted <- res_sex[order(res_sex$padj), ]  # Sort by adjusted p-value
sig_genes <- subset(res_sex_sorted, padj < 0.05)  # Select significant genes
head(sig_genes, 10)  # View top 10 significant genes

# MA Plot 
plotMA(res_sex, main = "MA Plot for Sex", ylim = c(-5, 5))

# ENSG00000146648 = EGFR
# ENSG00000012048 = BRCA1
# ENSG00000019186 = CYP24A1

# Boxplot of Expression Levels for Specific Genes
gene_of_interest <- "ENSG00000019186"  # Change to any gene of interest
gene_counts <- plotCounts(dds_sex, gene = gene_of_interest, intgroup = "Sex", returnData = TRUE)

# Remove outliers
gene_counts <- gene_counts %>%
  mutate(Q1 = quantile(count, 0.25),
         Q3 = quantile(count, 0.75),
         IQR = Q3 - Q1) %>%
  filter(count >= (Q1 - 1.5 * IQR) & count <= (Q3 + 1.5 * IQR)) %>%
  select(-Q1, -Q3, -IQR)

# Boxplot of Expression Levels for Specific Genes
ggplot(gene_counts, aes(x = Sex, y = count, fill = Sex)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = paste("Expression of CYP24A1 by Sex"),
       x = "Sex",
       y = "Normalized Count")

# Descriptive statistics
gene_counts %>%
  group_by(Sex) %>%
  summarise(
    Min = min(count),
    Q1 = quantile(count, 0.25),
    Median = median(count),
    Mean = mean(count),
    Q3 = quantile(count, 0.75),
    Max = max(count),
    SD = sd(count)
  )

# Export DEG's to a tsv file
res_df <- data.frame(Gene = rownames(res), res, row.names = NULL)  # Move row names to first column
write.table(res_df, file = "DEG's_CancervsNon_Cancer_Cells.tsv", sep = "\t", quote = FALSE, row.names = FALSE, col.names = TRUE)





