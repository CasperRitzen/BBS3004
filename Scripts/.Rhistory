q()
# This is script for RNA-seq Analysis
# Load Libraries for RNA-seq Data Analysis
library(DESeq2)
library(dplyr)
library(tidyverse)
library(GEOquery)
# Set your working Directory
setwd("/Users/oguzhanbayrak/Desktop/BBS3004/")
# this is a script for RNA-seq Analysis
# libraries
library(DESeq2)
library(dplyr)
library(tidyverse)
library(GEOquery)
# Set your working directory
setwd("C:/Users/ritze/OneDrive/Documenten/Maastricht_University/BBS3004Data/FPKM")
# step 1 of data extraction
Data <- read.delim("GSE81089_FPKM_cufflinks.tsv", header=TRUE, row.names=1, sep="\t", check.names=FALSE)
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
metadata <- pData(phenoData(gse[[1]]))
head(metadata)
metadata <- metadata %>%
rename(
Sample = `tumor (t) or normal (n):ch1`,
Source = source_name_ch1,
Tumor_stage = `stage tnm:ch1`,
Age = `age:ch1`,
Sex = `gender:ch1`,
Life_Status = `dead:ch1`,
Smoking_Status = `smoking:ch1`
)
# Check updated column names
print(colnames(metadata))
# Select only the renamed columns and overwrite metadata
metadata <- metadata %>%
select(Sample, Source, Tumor_stage, Age, Sex, Life_Status, Smoking_Status)
rownames(metadata) <- metadata$Sample
# Check if the changes were applied
head(metadata)
# Remove the last row from Data
head(Data)
dim(Data)
Data <- Data[-nrow(Data), ]
# Check if the last row is removed
dim(Data)  # Check new dimensions
# Define the genes of interest
genes_of_interest <- c("ENSG00000146648", "ENSG00000133703", "ENSG00000157764")
# Convert Data to a long format (genes in rows, samples in columns)
expression_long <- Data %>%
as.data.frame() %>%
rownames_to_column("Gene") %>%
filter(Gene %in% genes_of_interest) %>%
pivot_longer(cols = -Gene, names_to = "Sample", values_to = "Expression")
# Merge expression data with metadata to include sample information
expression_long <- expression_long %>%
left_join(metadata, by = "Sample")
# View the structure of the transformed data
print(head(expression_long))
#=======================================#
# Differential Gene Expression Analysis #
#=======================================#
# Deseq2
# making sure the row names in metadata matches to column names in Data
all(colnames(Data) %in% rownames(metadata))
# Find Columns in Data That Are Not in metadata
setdiff(colnames(Data), rownames(metadata))
# Remove everything after the underscore in Data
colnames(Data) <- sub("_.*", "", colnames(Data))
# Check again if row names in metadata matches to column names in Data
all(colnames(Data) %in% rownames(metadata))
# Check if they are in the same order
all(colnames(Data) == rownames(metadata))
# Reorder metadata rows to match the column order in Data
metadata <- metadata[match(colnames(Data), rownames(metadata)), , drop = FALSE]
# Check if they now match
all(colnames(Data) == rownames(metadata))
# Check the values in the data
summary(Data)
# Convert all data values to Absolute values. (Non-negative)
Data <- abs(Data)
# Round values to integers
Data <- round(Data)
# Check the values in the data
summary(Data)
# Construct a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = Data,
colData = metadata,
design = ~ Smoking_Status)
# Construct a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = Data,
colData = metadata,
design = ~ Source)
dds <- dds[keep2,]
dds <- dds[keep,]
dds <- dds[keep2,]
View(expression_long)
View(dds)
View(dds)
View(dds)
dds
View(metadata)
View(Data)
#recoding smoking status
metadata$Smoking_Status <- recode(metadata$Smoking_Status,
"1" = "Non_Smoker",
"2" = "Smoker",
"3" = "Former_Smoker")
# Construct a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = Data,
colData = metadata,
design = ~ Smoking_Status)
#recoding smoking status
metadata$Smoking_Status <- recode(metadata$Smoking_Status,
"1" = "Non_Smoker",
"2" = "Smoker",
"3" = "Unknown")
#removing non-malignant tissues since iam comparing smking to non smoking in cancer
metadata_filtered <- metadata %>% filter(!is.na(Smoking_Status))
Data_filtered <- Data[, colnames(Data) %in% rownames(metadata_filtered)]
View(metadata_filtered)
# Construct a DESeqDataSet object
dds_filtered <- DESeqDataSetFromMatrix(countData = Data_filtered,
colData = metadata_filtered,
design = ~ Smoking_Status)
#set factor level
dds_filtered$Smoking_Status <- relevel(dds_filtered$Smoking_Status, ref = "Smoking")
View(Data_filtered)
View(dds_filtered)
#set factor level
dds_filtered$Smoking_Status <- relevel(dds_filtered$Smoking_Status, ref = "Smoking_Status")
View(metadata_filtered)
View(metadata_filtered)
#set factor level
dds_filtered$Smoking_Status <- relevel(dds_filtered$Smoking_Status, ref = "Smoking")
#recoding smoking status
metadata$Smoking_Status <- recode(metadata$Smoking_Status,
"1" = "Non_Smoker",
"2" = "Smoker",
"3" = "Unknown"
`NA`= "Control")
#recoding smoking status
metadata$Smoking_Status <- recode(metadata$Smoking_Status,
"1" = "Non_Smoker",
"2" = "Smoker",
"3" = "Unknown",
`NA`= "Control")
View(metadata)
View(metadata)
View(metadata)
# Check if they now match
all(colnames(Data) == rownames(metadata))
#recoding smoking status
metadata$Smoking_Status <- recode(metadata$Smoking_Status,
"1" = "Non_Smoker",
"2" = "Smoker",
"3" = "Unknown",
`NA`= "Control")
#recoding smoking status
metadata$Smoking_Status <- recode(metadata$Smoking_Status,
"1" = "Non_Smoker",
"2" = "Smoker",
"3" = "Unknown",
"NA"= "Control")
view(metadata)
#recoding smoking status
metadata$Smoking_Status <- recode(metadata$Smoking_Status,
"1" = "Non_Smoker",
"2" = "Smoker",
"3" = "Unknown")
#turning NA into Control
metadata$Smoking_Status[is.na(metadata$Smoking_Status)] <- "Control"
View(metadata)
View(metadata)
# Construct a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = Data,
colData = metadata,
design = ~ Smoking_Status)
keep2 <- rowMeans(counts(dds)) >=10
dds <- dds[keep2,]
#set factor level
dds$Smoking_Status <- relevel(dds_filtered$Smoking_Status, ref = "Non_smoker")
#set factor level
dds$Smoking_Status <- relevel(dds_filtered$Smoking_Status, ref = "Non_Smoker")
