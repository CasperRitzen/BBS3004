# Load Libraries for RNA-seq Data Analysis
library(DESeq2)
library(dplyr)
library(tidyverse)
library(GEOquery)

# Set your working Directory
setwd("/Users/oguzhanbayrak/Desktop/BBS3004/")

#=======================================#
# Step 1. Import Data & metadata into R #
#=======================================#


# Load your Data
Data <- read.delim("GSE81089_FPKM_cufflinks.tsv", header=TRUE, row.names=1, sep="\t", check.names = FALSE)


# get metadata 
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
metadata <- pData(phenoData(gse[[1]]))
head(metadata)  # Have a glimpse of how metadata looks like

# Increase buffer size by setting `Sys.setenv("VROOM_CONNECTION_SIZE")`
#Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 1000)

# Rename columns in metadata
colnames(metadata)

#write.table(metadata, file ="metadata.tsv", sep = "\t", row.names = FALSE, quote = FALSE)

metadata <- metadata %>%
  rename(
    Sample = `tumor (t) or normal (n):ch1`,
    Source = source_name_ch1,
    Tumor_stage = `stage tnm:ch1`,
    Age = `age:ch1`,
    Sex = `gender:ch1`,
    Life_Status = `dead:ch1`,
    Smoking_Status = `smoking:ch1`
  )

# Check updated column names
print(colnames(metadata))

# Select only the renamed columns and overwrite metadata
metadata <- metadata %>%
  select(Sample, Source, Tumor_stage, Age, Sex, Life_Status, Smoking_Status) 

rownames(metadata) <- metadata$Sample

# Check if the changes were applied
head(metadata)

#write.table(metadata, file ="metadata.tsv", sep = "\t", row.names = FALSE, quote = FALSE)

# Remove the last row from Data
head(Data)
dim(Data)
Data <- Data[-nrow(Data), ]

# Check if the last row is removed
dim(Data)  # Check new dimensions

# Explore Visualization of the data
# Perform quick visualization of known lung cancer genes:
# EGFR, KRAS, MET, LKB1, BRAF, PIK3CA, ALK, RET, and ROS1

# Define the genes of interest
genes_of_interest <- c("ENSG00000146648", "ENSG00000118046", "ENSG00000157764")

# Convert Data to a long format (genes in rows, samples in columns)
expression_long <- Data %>%
  as.data.frame() %>%
  rownames_to_column("Gene") %>%
  filter(Gene %in% genes_of_interest) %>%
  pivot_longer(cols = -Gene, names_to = "Sample", values_to = "Expression")

# Merge expression data with metadata to include sample information
expression_long <- expression_long %>%
  left_join(metadata, by = "Sample")

# View the structure of the transformed data
print(head(expression_long))

# Plot expression levels of selected genes
ggplot(expression_long, aes(x = Sample, y = Expression, fill = Gene)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
  theme_minimal() +
  labs(title = "Gene Expression Levels Across Samples",
       x = "Sample",
       y = "Expression Level") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate sample labels


# Boxplot of gene expression by tumor stage
ggplot(expression_long, aes(x = Tumor_stage, y = Expression, fill = Tumor_stage)) +
  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
  geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
  facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
  theme_minimal() +
  labs(title = "Gene Expression Levels by Tumor stage",
       x = "Tumor stage",
       y = "Expression Level") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability


# Alternatively, you can use a violin plot
ggplot(expression_long, aes(x = Tumor_stage, y = Expression, fill = Tumor_stage)) +
  geom_violin(alpha = 0.6) +  # Shows density of expression levels
  geom_jitter(width = 0.2, alpha = 0.7) +  # Adds individual sample points
  facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
  theme_minimal() +
  labs(title = "Gene Expression Levels by Tumor stage",
       x = "Tumor stage",
       y = "Expression Level") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

#=======================================#
# Differential Gene Expression Analysis #
#=======================================#

Counts <- read.delim("GSE81089_FPKM_cufflinks.tsv", row.names=1, header=TRUE, sep="\t", check.names = FALSE)

# Deseq2
# making sure the row names in metadata matches to column names in Data
all(colnames(Counts) %in% rownames(metadata))

# Find Columns in Data That Are Not in metadata
setdiff(colnames(Counts), rownames(metadata))

# Remove everything after the underscore in Data
colnames(Counts) <- sub("_.*", "", colnames(Counts))

# Check again if row names in metadata matches to column names in Data
all(colnames(Counts) %in% rownames(metadata))

# Check if they are in the same order
all(colnames(Counts) == rownames(metadata))

# Reorder metadata rows to match the column order in Data
metadata <- metadata[match(colnames(Counts), rownames(metadata)), , drop = FALSE]

# Check if they now match
all(colnames(Counts) == rownames(metadata))

# Check the values in the data
summary(Counts)

# Convert all data values to Absolute values. (Non-negative)
Data <- abs(Counts)

# Round values to integers
Data <- round(Counts)


# Construct a DESeqDataSet object 
dds <- DESeqDataSetFromMatrix(countData = Counts,
                              colData = metadata,
                              design = ~ Source)

dds

# Quality control
# Remove genes with low counts
keep2 <- rowMeans(counts(dds)) >=10
dds <- dds[keep2,]

# set the factor level
dds$Source <- relevel(dds$Source, ref = "Human non-malignant tissue")

# Run DESeq
dds <- DESeq(dds)
res <- results(dds) # Differentially expressed genes are given

res 

# Explore results
summary(res)
res0.01 <- results(dds, alpha = 0.01)
summary(res0.01)

# MA plot
plotMA(res0.01)


# Individual analysis Age_groups #
#=======================================#

# Redefine genes of interest
genes_of_interest <- c("ENSG00000134184", "ENSG00000166949", "ENST00000550429.1") 

ENSG00000134184 --> GSTM1 
ENSG00000166949 --> SMAD3
ENST00000550429.1--> KIF21A-208

# Ensure that Age is a numerical variable in metadata
metadata$Age <- as.numeric(metadata$Age)

# Replace NA values with "Control"
metadata$AgeGroup[is.na(metadata$AgeGroup)] <- "Control"
metadata$Age <- as.numeric(metadata$Age)  # Convert Age to numeric
metadata$AgeGroup <- cut(metadata$Age, 
                         breaks = c(0, 30, 50, 70, Inf), 
                         labels = c("Young", "Middle-aged", "Older", "Elderly"))  # Categorize into groups
metadata$AgeGroup <- as.factor(metadata$AgeGroup)  # Convert to categorical variable

Counts <- Counts[, colSums(is.na(Counts)) == 0]

metadata <- metadata[match(colnames(Counts), rownames(metadata)), , drop = FALSE]

Counts[Counts < 0] <- 0

Counts <- round(Counts)
Counts <- data.frame(lapply(Counts, as.numeric), row.names = rownames(Counts))

metadata <- metadata %>% filter(!is.na(AgeGroup))
Counts <- Counts[, colnames(Counts) %in% rownames(metadata)]  # Keep only matching samples
metadata <- metadata[rownames(metadata) %in% colnames(Counts), ]

ncol(Counts) == nrow(metadata)

setdiff(colnames(Counts), rownames(metadata))  # Names in Counts not in metadata
setdiff(rownames(metadata), colnames(Counts))  # Names in metadata not in Counts

metadata <- metadata[match(colnames(Counts), rownames(metadata)), , drop = FALSE]
metadata <- metadata[rownames(metadata) %in% colnames(Counts), ]
Counts <- Counts[, colnames(Counts) %in% rownames(metadata)]

dim(Counts)  # Should return (genes x samples)
dim(metadata)  # Should return (samples x metadata_columns)

ncol(Counts) == nrow(metadata)

# Construct a DESeqDataSet object with variable Sex
dds_age <- DESeqDataSetFromMatrix(countData = Counts,
                                  colData = metadata,
                                  design = ~ AgeGroup)
# Rename levels of AgeGroup
levels(dds_age$AgeGroup) <- c("Young", "Middle-Aged", "Old")  # Adjust as needed

# Now, you can safely relevel it
dds_age$AgeGroup <- relevel(dds_age$AgeGroup, ref = "Young")

dds_age$AgeGroup <- relevel(dds_age$AgeGroup, ref = "Young")

dds_age


# Run DESeq 
dds_age <- DESeq(dds_age)
res_age <- results(dds_age)

res_age

# Explore results
summary(res_age)
res_age_0.05 <- results(dds_age, alpha = 0.05) 

# MA Plot 
plotMA(res_age, main = "MA Plot for Age", ylim = c(-5, 5))


# Get the count data for the specific gene of interest (you can change the gene here)
gene_counts <- plotCounts(dds_age, gene = gene_of_interest, intgroup = "AgeGroup", returnData = TRUE)

# Now, create a boxplot to visualize the expression levels by Age Group
ggplot(gene_counts, aes(x = AgeGroup, y = count, fill = AgeGroup)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = paste("Expression of", gene_of_interest, "by Age Group"),
       x = "Age Group",
       y = "Normalized Count") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


# Remove the last row from Data
head(Data)
dim(Data)
Data <- Data[-nrow(Data), ]

# Check if the last row is removed
dim(Data)  # Check new dimensions

res_df <- data.frame(Gene = rownames(res_age), res_age, row.names = NULL)
write.table(res_df, file = "DEG_AgeGroup_Analysis.tsv", sep = "\t", quote = FALSE, row.names = FALSE, col.names = TRUE)

dim(res_age)
dim(counts(dds_age))

# Run DESeq2 analysis for age groups if not done yet
dds_age <- DESeq(dds_age)
res_age <- results(dds_age)

# Confirm the size of res_age
dim(res_age)  # It should match the number of rows in your count matrix


# Export DEG's to a tsv file
res_df <- data.frame(Gene = rownames(res_age), res_age, row.names = NULL)  # Move row names to first column
write.table(res_df, file = "DEG's_Age.tsv", sep = "\t", quote = FALSE, row.names = FALSE, col.names = TRUE)

